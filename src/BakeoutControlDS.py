#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        BakeOutControlDS.py
#
# description : Python source for the BakeOutControlDS and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                BakeOutControlDS are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  srubio@cells.es,knowak@cells.es,mniegowski@cells.es
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    ALBA Synchrotron Light Source
#               www.cells.es, Barcelona
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys,traceback
import time
import serial
import threading
from BakeoutControl import COMMAND, BakeoutController
from BakeoutEnumeration import *
from decimal import Decimal
from threading import Event, Lock


#==================================================================
#   BakeOutControlDS Class Description:
#
#         This device can be used to do a simple control of a Bake Out process.<br/>
#         <p>
#         The ControllerType property tells the kind of temperature controller to use; 
#         Elotech-Bestec and Eurotherm (over modbus) protocols are supported, 
#         CommsDevice specifies the device to be used for communications.
#         From this controller we will read the Temperature and TemperatureSetPoint 
#         attributes, but it will not be modified by the device server.
#         </p><p>
#         Using the PressureAttribute property a pressure value will be read from other
#         Tango Device and showed as Pressure attribute. If the value readed exceeds the
#         PressureSetPoint value (either attribute or property); then a command (Reset or Standby) 
#         will be executed to stop the Temperature Controller device. <br>
#         This interlock action will be performed in the CheckPressure command.
#         </p><p>
#         The State and Status will be updated depending of the Status register of the 
#         Temperature Controller; this status will be read and updated using the CheckStatus
#         command.
#         </p>
#
#==================================================================
#     Device States Description:
#
#   DevState.OFF :
#   DevState.DISABLE :
#   DevState.FAULT :
#   DevState.ALARM :
#   DevState.ON :
#==================================================================


class BakeOutControlDS(PyTango.Device_3Impl):

#--------- Add you global variables here --------------------------
    def error(self,msg): print 'ERROR: %s: %s' % (time.ctime(),msg)
    def info(self,msg): print 'INFO: %s: %s' % (time.ctime(),msg)
    def debug(self,msg): print 'DEBUG: %s: %s' % (time.ctime(),msg)
    def warning(self,msg): print 'WARNING: %s: %s' % (time.ctime(),msg)
    
    ELOTECH = { 'SEND':'10',
                'WRITE':'20',
                'SAVE':'21',
                'ZONE ON/OFF':'8F',
                'MODE':'8B',
                'SETPOINT1':'21',
                'SETPOINT2':'22',
                'TEMPERATURE':'10',
                'RISING':'2F',
                'FALLING':'2F',
                'CONFIG':'80',
                'STATUS':'70',
                }
    
    def init_serial(self):
        if ( hasattr(self, "serial") and self._serial ): 
            self.close()
        self._serial = serial.Serial()
        self._serial.baudrate = 9600
        self._serial.bytesize = 7
        self._serial.parity = "E"
        self._serial.stopbits = 1
        self._serial.timeout = 0
        self._serial.port = self.CommsDevice
        self._serial.xonxoff = 0
        self._serial.rtscts = 0
        
    def update_properties(self,property_list = []):
        property_list = property_list or self.get_device_class().device_property_list.keys()
        #self.db = self.prop_util.db
        if not hasattr(self,'db') or not self.db: self.db = PyTango.Database()
        props = dict([(key,getattr(self,key)) for key in property_list if hasattr(self,key)])
        for key,value in props.items():
            print 'Updating Property %s = %s' % (key,value)
            self.db.put_device_property(self.get_name(),{key:isinstance(value,list) and value or [value]})
            
    def update_status(self):
        status = 'The Device is %s.\n' % self.get_state()
        status += 'Last State Change was at %s.\n' % self.state_change
        status += 'Temperature at %s was %s (max = %s).\n' % (time.ctime(self.temp_time),self.temp_value,self.TemperatureSetPoint)
        status += 'Pressure at %s was %s (max = %s).\n' % (time.ctime(self.pressure_time),self.pressure_value,self.PressureSetPoint)
        for exception in ['init_exception','comms_exception']:
            if hasattr(self,exception): 
                status += '%s\n' % getattr(self,exception)
        self.set_status(status)
    
    def checksum(self,x,y):
        print 'In checksum(%s,%s)' % (x,y)
        res = 256 - x - y - 32
        while ( res <= 0 ): res += 256
        return str(hex(res)).upper()[2:]
        
    def elotech_checksum(self,args):
        print 'In checksum(%s)' % (args)
        res = 256 - sum([int(i, 16) for i in args])
        while ( res <= 0 ): res += 256
        return "%02x".upper() % res
        
    def elotech_value(self, value):
        v = Decimal(str(value))
        v = v.as_tuple()
        mantissa = "%04x".upper() % int(("-" if v[0] else "") + "".join(map(str, v[1])))
        exponent = "%02x".upper() % int(self.int2bin(v[2]), 2)        
        return mantissa[:2], mantissa[-2:], exponent         
        
    def int2bin(self, n, count=8):
        return "".join([str((n >> y) & 1) for y in range(count - 1, -1, -1)])        
        
    def listen(self):
        print 'In listen()' 
        s = self._serial.readline()
        if ( not s ):
            ts = 5 
            event = threading.Event()
            while ( not s and ts ):
                event.wait(0.1)#added to avoid deadlock
                s = self._serial.readline()
                ts -= 1
        s += self._serial.readline()
        print 'Received %d chars: "%s"' % (len(s),s.strip())
        return s
            
    #==================================================================
    #    Start of Kacper Methods
            
    def getLimitAttr(self, zone, attr):
        if ( self.ControllerType.lower() == "eurotherm" ):
            raise Exception,'NotImplementedError'
        elif ( self.ControllerType.lower() == "elotech" ):
            device = 1
            instruction = ELOTECH_ISTR.get("SEND")
            code = ELOTECH_PARAM.get("OUTPUT_LIMIT")
        else:
            raise RuntimeError("UnknownController: %s" % self.ControllerType)
        
        ans = self.SendCommand([device, zone, instruction, code])
        if ( ans ):
            data = int(ans[9:13], 16)
        else:
            data = 100
        
        self.setLimit(zone, data)
        attr.set_value(data)
        
    #------------------------------------------------------------ getLimitAttr()

    def setLimitAttr(self, zone, attr):
        data = []
        attr.get_write_value(data)
        if ( self.ControllerType.lower() == "eurotherm" ):
            raise Exception,'NotImplementedError'
        elif ( self.ControllerType.lower() == "elotech" ):
            device = 1
            instruction = ELOTECH_ISTR.get("ACPT")
            code = ELOTECH_PARAM.get("OUTPUT_LIMIT")
            value = data[0]
        else:
            raise RuntimeError("UnknownController: %s" % self.ControllerType)
        self.SendCommand([device, zone, instruction, code, value])
        
        self.setLimit(zone, value)
        
    #------------------------------------------------------------ setLimitAttr()
        
    def getLimit(self, key):
        return self._oLimits.get(key)
    
    #---------------------------------------------------------------- getLimit()
      
    def setLimit(self, key, value):
        self._oLimits[key] = value
    
    #---------------------------------------------------------------- setLimit()
  
    def getOutputAttr(self, zone, attr):
        if ( self.ControllerType.lower() == "eurotherm" ):
            raise Exception,'NotImplementedError'
        elif ( self.ControllerType.lower() == "elotech" ):
            device = 1
            instruction = ELOTECH_ISTR.get("SEND")
            code = ELOTECH_PARAM.get("OUTPUT")
        else:
            raise RuntimeError("UnknownController: %s" % self.ControllerType)
        
        ans = self.SendCommand([device, zone, instruction, code])
        if ( ans ):
            data = int(ans[9:13], 16)
        else:
            data = 0
        
        self.setOutput(zone, data)
        
        if ( attr ):
            attr.set_value(data)
        
        return data
        
    #----------------------------------------------------------- getOutputAttr()
      
    def getOutput(self, key):
        return self._outputs.get(key)
    
    #--------------------------------------------------------------- getOutput()
      
    def setOutput(self, key, value):
        self._outputs[key] = value
    
    #--------------------------------------------------------------- setOutput()
        
    def getParamsAttr(self, programNo, attr):
#        print "In " + self.get_name() + ".getParamsAttr()"
        data = self.getParams(programNo)
        attr.set_value(data)
        
    #----------------------------------------------------------- getParamsAttr()
 
    def getParams(self, key):
        return self._pParams.get(key)
                
    #--------------------------------------------------------------- getParams()
    
    def setParams(self, key, value):
        self._pParams[key] = value
        
    #--------------------------------------------------------------- setParams()
 
    def getProgramAttr(self, programNo, attr):
#        print "In " + self.get_name() + ".getProgramAttr()"
        data = self.getProgram(programNo)        
        dim_x = 3
        dim_y = len(data) / 3    
        attr.set_value(data, dim_x, dim_y)
        
    #---------------------------------------------------------- getProgramAttr()

    def setProgramAttr(self, programNo, attr):
#        print "In " + self.get_name() + ".setProgramAttr()"
        data = []
        attr.get_write_value(data)
        if ( len(data) == 0 or len(data) % 3 != 0 ):
            raise Exception,'ValueError'
        self.setProgram(programNo, data)
        self.setParams(programNo, list(PARAMS_DEFAULT))
        
    #---------------------------------------------------------- setProgramAttr()
 
    def getProgram(self, key):
        return self._programs.get(key)
    
    #-------------------------------------------------------------- getProgram()
   
    def setProgram(self, key, value):
        self._programs[key] = value
    
    #-------------------------------------------------------------- setProgram()    
      
    def getTemperatureAttr(self, zone, attr=None):
#        print "In " + self.get_name() + ".getTemperatureAttr()"
        if ( self.ControllerType.lower() == "eurotherm" ):
            raise Exception,'NotImplementedError'
        elif ( self.ControllerType.lower() == "elotech" ):
            device = 1
            instruction = ELOTECH_ISTR.get("SEND")
            code = ELOTECH_PARAM.get("TEMP")
        else:
            raise RuntimeError("UnknownController: %s" % self.ControllerType)
        
        ans = self.SendCommand([device, zone, instruction, code])
        if ( ans ):
            data = float(int(ans[9:13], 16)*10**int(ans[13:15], 16))
        else:
            data = TEMP_DEFAULT
        
        self.setTemperature(zone, data)
        
        if ( attr ):
            attr.set_value(data)
        
        return data
    
    #------------------------------------------------------ getTemperatureAttr()

    def getTemperature(self, key):
        return self._temps.get(key)
    
    #---------------------------------------------------------- getTemperature()

    def setTemperature(self, key, value):
        self._temps[key] = value
        
    #---------------------------------------------------------- setTemperature()
       
    def getZonesAttr(self, programNo, attr):
#        print "In " + self.get_name() + ".getZonesAttr()"
        data = self.getZones(programNo)        
        attr.set_value(data)
    
    #------------------------------------------------------------ getZonesAttr()

    def setZonesAttr(self, programNo, attr):
#        print "In " + self.get_name() + ".setZonesAttr()"
        data = []
        attr.get_write_value(data)
        dataSet = set(data)
        dataSet.intersection_update(i for i in range(1, self._noZones))
        for otherSet in [self.getZones(pNo) for pNo in range(1, self._noZones) if pNo != programNo]:
            if ( dataSet.intersection(otherSet) ):
                dataSet.difference_update(otherSet)
        self.setZones(programNo, sorted(dataSet))
        
    #------------------------------------------------------------ setZonesAttr()
       
    def getZones(self, key):
        return self._pZones.get(key)
    
    #---------------------------------------------------------------- getZones()

    def setZones(self, key, value):
        self._pZones[key] = value
    
    #---------------------------------------------------------------- setZones()
      
    def zoneCount(self):
        return self._noZones
    
    #--------------------------------------------------------------- zoneCount()            
    
    #    End of Kacper Methods
    #==================================================================

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_3Impl.__init__(self,cl,name)
        BakeOutControlDS.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()
        if ( self.ControllerType.lower() == "elotech" and self._serial ):
            print 'delete_device(): Closing Elotech Serial Line ...'
            self._serial.close()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.set_state(PyTango.DevState.ON)
        #self.get_device_properties(self.get_device_class())
        self.get_device_properties(self.get_device_class())
        self.update_properties()
        
        self._sndCmdLock = Lock()
        self._noZones = 1
        self._outputs = self._oLimits = self._programs = self._pParams = self._pZones = self._temps = None
        self._pressure = self._tempMax = 0.
        self._pressureTime = self._tempTime = long(0)        
        
        self.temp_time = self.pressure_time = 0
        self.temp_value = self.pressure_value = None
        self.HW_Running, self.HW_Disable = False, False
        
        try: 
            self.pressureAttr = PyTango.AttributeProxy(self.PressureAttribute)
        except Exception,e: 
            self.init_exception = 'Unable to create AttributeProxy for %s: %s' % (self.PressureAttribute,str(e))
            self.pressureAttr = None
            self.error(self.init_exception)
            self.error(traceback.format_exc())
        try:
            if 'eurotherm' in self.ControllerType.lower():
                self.info('Using an eurotherm controller ...')
                self.modbus = PyTango.DeviceProxy(self.CommsDevice)
                self.modbus.ping()
            elif 'elotech' in self.ControllerType.lower():
                self.info('Using an elotech controller ...')
                self.init_serial()
                self._serial.open()
                self._noZones = 8
                self._outputs = dict.fromkeys((i for i in range(1, self._noZones + 1)), 0)
                self._oLimits = dict.fromkeys((i for i in range(1, self._noZones + 1)), 100)
                self._programs = dict.fromkeys((i for i in range(1, self._noZones + 1)), PROGRAM_DEFAULT)
                self._pParams = dict((i, list(PARAMS_DEFAULT)) for i in range(1, self._noZones + 1))
                self._pZones = dict.fromkeys((i for i in range(1, self._noZones + 1)), list())
                self._temps = dict.fromkeys((i for i in range(1, self._noZones + 1)), TEMP_DEFAULT)
                self._controller = BakeoutController(self)
                self._queue = self._controller.getQueue()
                self._controller.setDaemon(True)
                self._controller.start()
                self._queue.put((0, COMMAND.get("STOP")))      
            else:
                raise 'UnknownController_%s' % self.ControllerType
        except Exception,e:
            self.error('Exception in BakeOutController.init_device(): '+str(e))
            self.init_error='Exception in BakeOutController.init_device(): '+str(e)
            PyTango.Except.throw_exception("BakeOutController_initDeviceException",str(e),str(e))
            self.modbus,self._serial = None,None
        self.info("Device Server "+self.get_name()+' waiting for request.')

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print "In ", self.get_name(), "::always_excuted_hook()"
        try:
            if ( self.ControllerType.lower() == "eurotherm" ):
                self.modbus.ping()
            
        except:
            print traceback.format_exc()
            self.set_state(PyTango.DevState.FAULT)

#==================================================================
#
#    BakeOutControlDS read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print "In ", self.get_name(), "::read_attr_hardware()"

#------------------------------------------------------------------
#    Read Temperature_Max attribute
#------------------------------------------------------------------
    def read_Temperature_Max(self, attr):
        print "In ", self.get_name(), "::read_Temperature()"
        
        #    Add your own code here
        if ( self.ControllerType.lower() == "eurotherm" ):
            self._tempMax = self.read_Temperature_All()
        elif ( self.ControllerType.lower() == "elotech" ):
            if ( self._tempTime < long(time.time()) - 60 ):
                ans = self.read_Temperature_All()
            else:
                ans = self._temps.values()
            self._tempMax = max([value for value in ans if value != TEMP_DEFAULt])
        else:
            raise "UnknownController: %s" % self.ControllerType            
        attr.set_value(self._tempMax)
    
#------------------------------------------------------------------
#    Read Temperature_All attribute
#------------------------------------------------------------------
    def read_Temperature_All(self, attr=None):
        print "In " + self.get_name() + ".read_Temperature_All()"
        
        #    Add your own code here
        self._tempTime = long(time.time())
        if ( self.ControllerType.lower() == "eurotherm" ):
            data = float(self.modbus.ReadHoldingRegisters([1, 1])[0])
            print "Recv MODBUS: %s" % data
        elif ( self.ControllerType.lower() == "elotech" ):
            data = []                        
            for zone in range(1, self._noZones + 1):
                result = self.getTemperatureAttr(zone)
                data.append(result)
        else:
            raise "UnknownController: %s" % self.ControllerType

        for key, value in enumerate(data):
            self.setTemperature(key, value)
        
        if ( attr is not None ):
            attr.set_value(data, len(data))
        
        print "Out of ", self.get_name(), "::read_Temperature_All()"
        return data


#------------------------------------------------------------------
#    Read TemperatureSetPoint attribute
#------------------------------------------------------------------
    def read_TemperatureSetPoint(self, attr):
        print "In ", self.get_name(), "::read_TemperatureSetPoint()"
        
        #    Add your own code here
        data = self.TemperatureSetPoint
        attr.set_value(data)


#------------------------------------------------------------------
#    Write TemperatureSetPoint attribute
#------------------------------------------------------------------
    def write_TemperatureSetPoint(self, attr):
        print "In ", self.get_name(), "::write_TemperatureSetPoint()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.TemperatureSetPoint = float(data[0])
        self.update_properties()


#------------------------------------------------------------------
#    Read Pressure attribute
#------------------------------------------------------------------
    def read_Pressure(self, attr):
        print "In ", self.get_name(), "::read_Pressure()"
        
        #    Add your own code here
        if ( not self.pressureAttr ):
            raise RuntimeError("WrongPressureAttribute: %s" % (hasattr(self, "PressureAttribute") and str(self.PressureAttribute) or ""))
        self._pressureTime = long(time.time())
        self._pressure = self.CheckPressure()
        attr.set_value(self._pressure)


#------------------------------------------------------------------
#    Read PressureSetPoint attribute
#------------------------------------------------------------------
    def read_PressureSetPoint(self, attr):
        print "In ", self.get_name(), "::read_PressureSetPoint()"
        
        #    Add your own code here
        
        attr_PressureSetPoint_read = self.PressureSetPoint
        attr.set_value(attr_PressureSetPoint_read)


#------------------------------------------------------------------
#    Write PressureSetPoint attribute
#------------------------------------------------------------------
    def write_PressureSetPoint(self, attr):
        print "In ", self.get_name(), "::write_PressureSetPoint()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.PressureSetPoint = float(data[0])
        self.update_properties()

#==================================================================
#    Start of Kacper Attributes
#==================================================================
    def read_Output_1(self, attr):
        self.getOutputAttr(1, attr)
        
    #----------------------------------------------------------- read_Output_1()

    def read_Output_2(self, attr):
        self.getOutputAttr(2, attr)
        
    #----------------------------------------------------------- read_Output_2()

    def read_Output_3(self, attr):
        self.getOutputAttr(3, attr)
        
    #----------------------------------------------------------- read_Output_3()

    def read_Output_4(self, attr):
        self.getOutputAttr(4, attr)
        
    #----------------------------------------------------------- read_Output_4()

    def read_Output_5(self, attr):
        self.getOutputAttr(5, attr)
        
    #----------------------------------------------------------- read_Output_5()

    def read_Output_6(self, attr):
        self.getOutputAttr(6, attr)
        
    #----------------------------------------------------------- read_Output_6()

    def read_Output_7(self, attr):
        self.getOutputAttr(7, attr)
        
    #----------------------------------------------------------- read_Output_7()

    def read_Output_8(self, attr):
        self.getOutputAttr(8, attr)
        
    #----------------------------------------------------------- read_Output_8()

    def read_Output_1_Limit(self, attr):
        self.getLimitAttr(1, attr)
        
    #----------------------------------------------------- read_Output_1_Limit()

    def write_Output_1_Limit(self, attr):
        self.setLimitAttr(1, attr)
        
    #---------------------------------------------------- write_Output_1_Limit()

    def read_Output_2_Limit(self, attr):
        self.getLimitAttr(2, attr)
        
    #----------------------------------------------------- read_Output_2_Limit()

    def write_Output_2_Limit(self, attr):
        self.setLimitAttr(2, attr)
        
    #---------------------------------------------------- write_Output_2_Limit()

    def read_Output_3_Limit(self, attr):
        self.getLimitAttr(3, attr)
        
    #----------------------------------------------------- read_Output_3_Limit()

    def write_Output_3_Limit(self, attr):
        self.setLimitAttr(3, attr)
        
    #---------------------------------------------------- write_Output_3_Limit()

    def read_Output_4_Limit(self, attr):
        self.getLimitAttr(4, attr)
        
    #----------------------------------------------------- read_Output_4_Limit()

    def write_Output_4_Limit(self, attr):
        self.setLimitAttr(4, attr)
        
    #---------------------------------------------------- write_Output_4_Limit()

    def read_Output_5_Limit(self, attr):
        self.getLimitAttr(5, attr)
        
    #----------------------------------------------------- read_Output_5_Limit()

    def write_Output_5_Limit(self, attr):
        self.setLimitAttr(5, attr)
        
    #---------------------------------------------------- write_Output_5_Limit()

    def read_Output_6_Limit(self, attr):
        self.getLimitAttr(6, attr)
        
    #----------------------------------------------------- read_Output_6_Limit()

    def write_Output_6_Limit(self, attr):
        self.setLimitAttr(6, attr)
        
    #---------------------------------------------------- write_Output_6_Limit()

    def read_Output_7_Limit(self, attr):
        self.getLimitAttr(7, attr)
        
    #----------------------------------------------------- read_Output_7_Limit()

    def write_Output_7_Limit(self, attr):
        self.setLimitAttr(7, attr)
        
    #---------------------------------------------------- write_Output_7_Limit()

    def read_Output_8_Limit(self, attr):
        self.getLimitAttr(8, attr)
        
    #----------------------------------------------------- read_Output_8_Limit()

    def write_Output_8_Limit(self, attr):
        self.setLimitAttr(8, attr)
        
    #---------------------------------------------------- write_Output_8_Limit()
    
    def read_Program_1(self, attr):
#        print "In " + self.get_name() + ".read_Program_1()"
        self.getProgramAttr(1, attr)
        
    #------------------------------------------------------------ read_Program_1
  
    def write_Program_1(self, attr):
#        print "In " + self.get_name() + ".write_Program_1()"
        self.setProgramAttr(1, attr)
        
    #--------------------------------------------------------- write_Program_1()
        
    def read_Program_2(self, attr):
#        print "In " + self.get_name() + ".read_Program_2()"
        self.getProgramAttr(2, attr)
        
    #---------------------------------------------------------- read_Program_2()
         
    def write_Program_2(self, attr):
#        print "In " + self.get_name() + ".write_Program_2()"
        self.setProgramAttr(2, attr)
        
    #--------------------------------------------------------- write_Program_2()
 
    def read_Program_3(self, attr):
#        print "In " + self.get_name() + ".read_Program_3()"
        self.getProgramAttr(3, attr)
        
    #---------------------------------------------------------- read_Program_3()
        
    def write_Program_3(self, attr):
#        print "In " + self.get_name() + ".write_Program_3()"
        self.setProgramAttr(3, attr)
        
    #--------------------------------------------------------- write_Program_3()
 
    def read_Program_4(self, attr):
#        print "In " + self.get_name() + ".read_Program_4()"
        self.getProgramAttr(4, attr)
        
    #---------------------------------------------------------- read_Program_4()
       
    def write_Program_4(self, attr):
#        print "In " + self.get_name() + ".write_Program_4()"
        self.setProgramAttr(4, attr)
        
    #--------------------------------------------------------- write_Program_4()
 
    def read_Program_5(self, attr):
#        print "In " + self.get_name() + ".read_Program_5()"
        self.getProgramAttr(5, attr)
        
    #---------------------------------------------------------- read_Program_5()
        
    def write_Program_5(self, attr):
#        print "In " + self.get_name() + ".write_Program_5()"
        self.setProgramAttr(5, attr)
        
    #--------------------------------------------------------- write_Program_5()
  
    def read_Program_6(self, attr):
#        print "In " + self.get_name() + ".read_Program_6()"
        self.getProgramAttr(6, attr)
        
    #---------------------------------------------------------- read_Program_6()
        
    def write_Program_6(self, attr):
#        print "In " + self.get_name() + ".write_Program_6()"
        self.setProgramAttr(6, attr)
        
    #--------------------------------------------------------- write_Program_6()
 
    def read_Program_7(self, attr):
#        print "In " + self.get_name() + ".read_Program_7()"
        self.getProgramAttr(7, attr)
        
    #---------------------------------------------------------- read_Program_7()
        
    def write_Program_7(self, attr):
#        print "In " + self.get_name() + ".write_Program_7()"
        self.setProgramAttr(7, attr)
        
    #--------------------------------------------------------- write_Program_7()
 
    def read_Program_8(self, attr):
#        print "In " + self.get_name() + ".read_Program_8()"
        self.getProgramAttr(8, attr)
        
    #---------------------------------------------------------- read_Program_8()

    def write_Program_8(self, attr):
#        print "In " + self.get_name() + ".write_Program_8()"
        self.setProgramAttr(8, attr)
        
    #--------------------------------------------------------- write_Program_8()
      
    def read_Program_1_Params(self, attr):
#        print "In " + self.get_name() + ".read_Program_1_Params()"
        self.getParamsAttr(1, attr)
        
    #--------------------------------------------------- read_Program_1_Params()
       
    def read_Program_2_Params(self, attr):
#        print "In " + self.get_name() + ".read_Program_2_Params()"
        self.getParamsAttr(2, attr)

    #--------------------------------------------------- read_Program_2_Params()

    def read_Program_3_Params(self, attr):
#        print "In " + self.get_name() + ".read_Program_3_Params()"
        self.getParamsAttr(3, attr)

    #--------------------------------------------------- read_Program_3_Params()

    def read_Program_4_Params(self, attr):
#        print "In " + self.get_name() + ".read_Program_4_Params()"
        self.getParamsAttr(4, attr)

    #--------------------------------------------------- read_Program_4_Params()
       
    def read_Program_5_Params(self, attr):
#        print "In " + self.get_name() + ".read_Program_5_Params()"
        self.getParamsAttr(5, attr)

    #--------------------------------------------------- read_Program_5_Params()
 
    def read_Program_6_Params(self, attr):
#        print "In " + self.get_name() + ".read_Program_6_Params()"
        self.getParamsAttr(6, attr)

    #--------------------------------------------------- read_Program_6_Params()

    def read_Program_7_Params(self, attr):
#        print "In " + self.get_name() + ".read_Program_7_Params()"
        self.getParamsAttr(7, attr)
        
    #--------------------------------------------------- read_Program_7_Params()
        
    def read_Program_8_Params(self, attr):
#        print "In " + self.get_name() + ".read_Program_8_Params()"
        self.getParamsAttr(8, attr)
        
    #--------------------------------------------------- read_Program_8_Params()
       
    def read_Program_1_Zones(self, attr):
#        print "In " + self.get_name() + ".read_Program_1_Zones()"
        self.getZonesAttr(1, attr)
        
    #---------------------------------------------------- read_Program_1_Zones()
        
    def write_Program_1_Zones(self, attr):
#        print "In " + self.get_name() + ".write_Program_1_Zones()"
        self.setZonesAttr(1, attr)
        
    #--------------------------------------------------- write_Program_1_Zones()
        
    def read_Program_2_Zones(self, attr):
#        print "In " + self.get_name() + ".read_Program_2_Zones()"
        self.getZonesAttr(2, attr)
        
    #---------------------------------------------------- read_Program_2_Zones()
        
    def write_Program_2_Zones(self, attr):
#        print "In " + self.get_name() + ".write_Program_2_Zones()"
        self.setZonesAttr(2, attr)
        
    #--------------------------------------------------- write_Program_2_Zones()
 
    def read_Program_3_Zones(self, attr):
#        print "In " + self.get_name() + ".read_Program_3_Zones()"
        self.getZonesAttr(3, attr)
        
    #---------------------------------------------------- read_Program_3_Zones()
        
    def write_Program_3_Zones(self, attr):
#        print "In " + self.get_name() + ".write_Program_3_Zones()"
        self.setZonesAttr(3, attr)
        
    #--------------------------------------------------- write_Program_3_Zones()
 
    def read_Program_4_Zones(self, attr):
#        print "In " + self.get_name() + ".read_Program_4_Zones()"
        self.getZonesAttr(4, attr)
         
    #---------------------------------------------------- read_Program_4_Zones()
        
    def write_Program_4_Zones(self, attr):
#        print "In " + self.get_name() + ".write_Program_4_Zones()"
        self.setZonesAttr(4, attr)
        
    #--------------------------------------------------- write_Program_4_Zones()
       
    def read_Program_5_Zones(self, attr):
#        print "In " + self.get_name() + ".read_Program_5_Zones()"
        self.getZonesAttr(5, attr)
         
    #---------------------------------------------------- read_Program_5_Zones()
    
    def write_Program_5_Zones(self, attr):
#        print "In " + self.get_name() + ".write_Program_5_Zones()"
        self.setZonesAttr(5, attr)
        
    #--------------------------------------------------- write_Program_5_Zones()
 
    def read_Program_6_Zones(self, attr):
#        print "In " + self.get_name() + ".read_Program_6_Zones()"
        self.getZonesAttr(6, attr)
        
    #---------------------------------------------------- read_Program_6_Zones()
        
    def write_Program_6_Zones(self, attr):
#        print "In " + self.get_name() + ".write_Program_6_Zones()"
        self.setZonesAttr(6, attr)
        
    #--------------------------------------------------- write_Program_6_Zones()
 
    def read_Program_7_Zones(self, attr):
#        print "In " + self.get_name() + ".read_Program_7_Zones()"
        self.getZonesAttr(7, attr)
        
    #---------------------------------------------------- read_Program_7_Zones()
          
    def write_Program_7_Zones(self, attr):
#        print "In " + self.get_name() + ".write_Program_7_Zones()"
        self.setZonesAttr(7, attr)
       
    #--------------------------------------------------- write_Program_7_Zones()
       
    def read_Program_8_Zones(self, attr):
#        print "In " + self.get_name() + ".read_Program_8_Zones()"
        self.getZonesAttr(8, attr)
        
    #---------------------------------------------------- read_Program_8_Zones()
          
    def write_Program_8_Zones(self, attr):
#        print "In " + self.get_name() + ".write_Program_8_Zones()"
        self.setZonesAttr(8, attr)
        
    #--------------------------------------------------- write_Program_8_Zones()
 
    def read_Temperature_1(self, attr):
#        print "In " + self.get_name() + ".read_Temperature_1()"
        self.getTemperatureAttr(1, attr)
        
    #------------------------------------------------------ read_Temperature_1()
 
    def read_Temperature_2(self, attr):
#        print "In " + self.get_name() + ".read_Temperature_2()"
        self.getTemperatureAttr(2, attr)
        
    #------------------------------------------------------ read_Temperature_2()
   
    def read_Temperature_3(self, attr):
#        print "In " + self.get_name() + ".read_Temperature_3()"
        self.getTemperatureAttr(3, attr)
        
    #------------------------------------------------------ read_Temperature_3()
   
    def read_Temperature_4(self, attr):
#        print "In " + self.get_name() + ".read_Temperature_4()"
        self.getTemperatureAttr(4, attr)
        
    #------------------------------------------------------ read_Temperature_4()
   
    def read_Temperature_5(self, attr):
#        print "In " + self.get_name() + ".read_Temperature_5()"
        self.getTemperatureAttr(5, attr)
        
    #------------------------------------------------------ read_Temperature_5()
   
    def read_Temperature_6(self, attr):
#        print "In " + self.get_name() + ".read_Temperature_6()"
        self.getTemperatureAttr(6, attr)
        
    #------------------------------------------------------ read_Temperature_6()
   
    def read_Temperature_7(self, attr):
#        print "In " + self.get_name() + ".read_Temperature_7()"
        self.getTemperatureAttr(7, attr)
        
    #------------------------------------------------------ read_Temperature_7()
   
    def read_Temperature_8(self, attr):
#        print "In " + self.get_name() + ".read_Temperature_8()"
        self.getTemperatureAttr(8, attr)
        
    #------------------------------------------------------ read_Temperature_8()    
#==================================================================
#    End of Kacper Methods
#==================================================================

#==================================================================
#
#    BakeOutControlDS command methods
#
#==================================================================

#------------------------------------------------------------------
#    Reset command:
#
#    Description: Returns to initial state; forgots last alarm
#                
#------------------------------------------------------------------
    def Reset(self):
        print "In ", self.get_name(), "::Reset()"
        #    Add your own code here
        self.set_state(PyTango.DevState.ON)


#------------------------------------------------------------------
#    ReStart command:
#
#    Description: Puts the controller in Standby Mode (Different from manual and auto)
#                
#------------------------------------------------------------------
    def ReStart(self):
        print "In ", self.get_name(), "::ReStart()"
        #    Add your own code here
        if 'eurotherm' in self.ControllerType:
            raise Exception,'NotImplementedError'
        if 'elotech' in self.ControllerType:#1,1,20,8F,000100
            raise Exception,'NotImplementedError'
            ##The command should be reimplemented
            #for zone in range(1,9):
                #i,j,instruction,code = 1,zone,self.ELOTECH['WRITE'],self.ELOTECH['ZONE ON/OFF']
                #package = ['%02x'%i,'%02x'%j,instruction,code,'%04x'%1 + '00'] #Writing mode '1' to the device
                #chs = self.elotech_checksum(package)
                ###@note: just for fun, if the checksum is sent in lower case the result may vary (???)
                #s = "\n" + ''.join(package+[chs]).upper() + "\r"
                #print 'The Checksum is: %s' % chs
                #print 'The Serial command is: %s' % s
                #val,replies = 0.0,3
                #while replies>0:
                    #self.serial.write(s)
                    #result = self.listen()
                    #if not result:
                        #print 'Nothing received ...'
                        #replies-=2
                    #elif result[7:9]!='00': 
                        ##A temperature reading is at least 18 characters long
                        ##When there's an error the characters 7,8 will indicate the type of error
                        #print 'Error Received: %s' % result
                        #replies-=1
                    #else:
                        #print 'Acknowledge Received! %s' % result
                        #print ''
                        #break
                    #threading.Event().wait(.1)#added to avoid deadlock
                #pass #end of while        
        self.set_state(PyTango.DevState.ON)
        
#------------------------------------------------------------------
#    Start command:
#
#    Description: 
#                
#------------------------------------------------------------------        
    def Start(self, programNo):
        print "In " + self.get_name() + ".Start()"
        #    Add your own code here
        if 'eurotherm' in self.ControllerType:
            raise Exception,'NotImplementedError'
        if 'elotech' in self.ControllerType:        
            if ( not self._controller.isAlive(programNo) ):
                self._queue.put((programNo, COMMAND.get("START")))
            else:
                #print "\tErr: Program running (stop it first)"        
                raise Exception,"Err: Program running (stop it first)"
            
        ##State cannot be changed until the status will be verified!
        #self.set_state(PyTango.DevState.ON)            

#------------------------------------------------------------------
#    Stop command:
#
#    Description: Puts the controller in Standby Mode (Different from manual and auto)
#                
#------------------------------------------------------------------
    def Stop(self):
        print "In ", self.get_name(), "::Stop()"
        #    Add your own code here
        if 'eurotherm' in self.ControllerType:
            raise Exception,'NotImplementedError'
        if 'elotech' in self.ControllerType:#1,1,20,8F,000100
            if ( self._controller.isAlive(zone) ):
                self._queue.put((zone, COMMAND.get("STOP")))
            else:
                if ( zone ):
                    print "\tErr: Program stopped (start it first)"
                else:
                    print "\tErr: All programs stopped (start one first)"            
        
        ##State cannot be changed until the status will be verified!
        #self.set_state(PyTango.DevState.DISABLE)


#------------------------------------------------------------------
#    CheckPressure command:
#
#    Description: Reads the pressure value from the specified attribute.
#                Executes an Standby() or Reset() command if the PressureSetPoint value has been reached.
#                Standby or Reset will change depending of the type of controller.
#                
#------------------------------------------------------------------
    def CheckPressure(self):
        print "In ", self.get_name(), "::CheckPressure()"
        #    Add your own code here
        value = self.pressureAttr.read().value
        if ( value > self.PressureSetPoint ):
            self.warning('STOPPING THE BAKEOUT! Pressure is %f' % value)
            self.Stop()
        return value


#------------------------------------------------------------------
#    CheckStatus command:
#
#    Description: Communicates to the controller to update State and Status attributes.
#                
#------------------------------------------------------------------
    def CheckStatus(self):
        print "In ", self.get_name(), "::CheckStatus()"
        result = ''
        #    Add your own code here
        if 'eurotherm' in self.ControllerType:
            raise Exception,'NotImplementedError'
        if 'elotech' in self.ControllerType:
            raise Exception,'ItMustBeReImplemented!'
        
            ##This command must be reimplemented!
            status,zones = None,[]
            for zone in range(1,9):
                result = self.SendCommand([1,zone,self.ELOTECH['SEND'],self.ELOTECH['ZONE ON/OFF']])#self.ELOTECH['STATUS']])
                if result:
                    result = {'START':result[0],'DEV':result[1:3],'ZONE':result[3:5],'INSTR':result[5:7],'CODE':result[7:9], \
                                'VALUE':result[9:15],'CHK':result[15:17],'END':result[17]}
                    status = int(result['VALUE'][0:4])
                    zones.append(bool(status))#status>127)
            if any(zones):
                self.set_state(PyTango.DevState.ON)
                result = 'The Controller is Running!\n'
            else:
                self.set_state(PyTango.DevState.OFF)
                result = 'All Zones of the Controller has been stop!\n'
            result += 'Zones: %s' % str(zones)
            self.set_status(result)
            print result
            #result = self.SendCommand([1,1,self.ELOTECH['SEND'],self.ELOTECH['MODE']])
            #if result:
                #result = {'START':result[0],'DEV':result[1:3],'ZONE':result[3:5],'INSTR':result[5:7],'CODE':result[7:9], \
                            #'VALUE':result[9:15],'CHK':result[15:17],'END':result[17]}
                #mode = int(result['VALUE'][0:4])
                #if mode:
                    #self.set_state(PyTango.DevState.OFF)
                    #print 'The Controller has been stop!'
                    #print '-'*80
            #result = 'Status: %x ; Mode: %x' % (status, mode)
        return str(result)


#------------------------------------------------------------------
#    SendCommand command:
#
#    Description: Communicates to the controller to update State and Status attributes.
#                
#------------------------------------------------------------------
    def SendCommand(self,argin):
        print "In ", self.get_name(), "::SendCommand()"
        #    Add your own code here
        self._sndCmdLock.acquire()
        try:
            if ( self.ControllerType.lower() == "eurotherm" ):
                reply = str(self.modbus.ReadHoldingRegisters([int(command[0]), int(command[1])])[0])
                print "\tRecv MODBUS: %s" % reply
            elif ( self.ControllerType.lower() == "elotech" ):
                if ( len(command) < 4 ):
                    raise Exception,'ValueError'
                elif ( len(command) > 5 ):
                    raise Exception,'ValueError'
                else:
                    package = []
                    for i in range(len(command)):
                        if ( i < 2 ):
                            command[i] = ["%02x" % int(command[i])]
                        elif ( i < 4 ):
                            command[i] = [command[i]]
                        elif ( i == 4 ):
                            command[i] = self.elotech_value(command[i])
                        package.extend(command[i])            
                    package.append(self.elotech_checksum(package))
                    scmd = "\n" + "".join(package) + "\r"
                    print "\tSend block: %s" % scmd.strip()
                    
                    replies = 2
                    event = threading.Event()
                    while ( replies > 0 ):
                        self._serial.write(scmd)
                        ans = self.listen()
                        if ( not ans ):
                            replies -= 1
                        elif ( ans[7:9] in ELOTECH_ERROR.keys() ): 
                            print "\tRecv block: %s" % ans.strip()                        
                            print "\t" + ELOTECH_ERROR.get(ans[7:9])
                            ans = ""
                            break
                        else:
                            print "\tRecv block: %s" % ans.strip()
                            print "\tAck: Command executed"
                            break
                        event.wait(.1)
                    reply = str(ans)
            else:
                raise RuntimeError("UnknownController: %s" % self.ControllerType) 
            
            return reply
        finally:
            self._sndCmdLock.release()


#==================================================================
#
#    BakeOutControlDSClass class definition
#
#==================================================================
class BakeOutControlDSClass(PyTango.PyDeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'ControllerType':
            [PyTango.DevString, 
            "Eurotherm or Elotech. \nDepending of the chosen type the communication will use a Modbus protocol or a serial protocol.\nBehaviour of commands for each type are different!", 
            [''] ], 
        'CommsDevice':
            [PyTango.DevString, 
            "Device Server used for communications (modbus or serial line or serial device).", 
            [''] ], 
        'PressureAttribute':
            [PyTango.DevString, 
            "", 
            [''] ], 
        'PressureSetPoint':
            [PyTango.DevDouble, 
            "", 
            [ 2.e-4 ] ], 
        'TemperatureSetPoint':
            [PyTango.DevDouble, 
            "", 
            [ 250 ] ],      
        }


    #    Command definitions
    cmd_list = {
        'Reset':
            [[PyTango.DevVoid, "Returns to initial state, forgets last alarm"], 
            [PyTango.DevVoid, ""]], 
        'Start':
            [[PyTango.DevShort, ""],
             [PyTango.DevVoid, ""]],
        'Stop':
            [[PyTango.DevShort, ""],
             [PyTango.DevVoid, ""]],
        'ReStart':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],            
        'CheckPressure':
            [[PyTango.DevVoid, ""], 
            [PyTango.DevDouble, ""]], 
        'CheckStatus':
            [[PyTango.DevVoid, ""],
            [PyTango.DevString, ""]],            
        'SendCommand':
            [[PyTango.DevVarStringArray, "Issue an instruction to the controller"], 
            [PyTango.DevString, ""]],
        }

    #    Attribute definitions
    attr_list = {
        'Temperature_Max':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]],    
        'Temperature_All':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 8]],         
        'Temperature_SetPoint':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],
        'Pressure':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]], 
        'Pressure_SetPoint':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],    
        'Output_1':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Output_2':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Output_3':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Output_4':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Output_5':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Output_6':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Output_7':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Output_8':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Output_1_Limit':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],
        'Output_2_Limit':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],
        'Output_3_Limit':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],
        'Output_4_Limit':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],
        'Output_5_Limit':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],
        'Output_6_Limit':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],
        'Output_7_Limit':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],
        'Output_8_Limit':
            [[PyTango.DevShort, 
            PyTango.SCALAR, 
            PyTango.READ_WRITE]],                     
        'Program_1':
            [[PyTango.DevDouble, 
            PyTango.IMAGE, 
            PyTango.READ_WRITE, 3, 64]], 
        'Program_2':
            [[PyTango.DevDouble, 
            PyTango.IMAGE, 
            PyTango.READ_WRITE, 3, 64]], 
        'Program_3':
            [[PyTango.DevDouble, 
            PyTango.IMAGE, 
            PyTango.READ_WRITE, 3, 64]], 
        'Program_4':
            [[PyTango.DevDouble, 
            PyTango.IMAGE, 
            PyTango.READ_WRITE, 3, 64]], 
        'Program_5':
            [[PyTango.DevDouble, 
            PyTango.IMAGE, 
            PyTango.READ_WRITE, 3, 64]], 
        'Program_6':
            [[PyTango.DevDouble, 
            PyTango.IMAGE, 
            PyTango.READ_WRITE, 3, 64]], 
        'Program_7':
            [[PyTango.DevDouble, 
            PyTango.IMAGE, 
            PyTango.READ_WRITE, 3, 64]], 
        'Program_8':
            [[PyTango.DevDouble, 
            PyTango.IMAGE, 
            PyTango.READ_WRITE, 3, 64]],
        'Program_1_Zones':
            [[PyTango.DevShort, 
            PyTango.SPECTRUM, 
            PyTango.READ_WRITE, 8]],
        'Program_2_Zones':
            [[PyTango.DevShort, 
            PyTango.SPECTRUM, 
            PyTango.READ_WRITE, 8]], 
        'Program_3_Zones':
            [[PyTango.DevShort, 
            PyTango.SPECTRUM, 
            PyTango.READ_WRITE, 8]], 
        'Program_4_Zones':
            [[PyTango.DevShort, 
            PyTango.SPECTRUM, 
            PyTango.READ_WRITE, 8]], 
        'Program_5_Zones':
            [[PyTango.DevShort, 
            PyTango.SPECTRUM, 
            PyTango.READ_WRITE, 8]],             
        'Program_6_Zones':
            [[PyTango.DevShort, 
            PyTango.SPECTRUM, 
            PyTango.READ_WRITE, 8]], 
        'Program_7_Zones':
            [[PyTango.DevShort, 
            PyTango.SPECTRUM, 
            PyTango.READ_WRITE, 8]], 
        'Program_8_Zones':
            [[PyTango.DevShort, 
            PyTango.SPECTRUM, 
            PyTango.READ_WRITE, 8]],                 
        'Program_1_Params':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 4]],
        'Program_2_Params':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 4]], 
        'Program_3_Params':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 4]], 
        'Program_4_Params':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 4]], 
        'Program_5_Params':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 4]],             
        'Program_6_Params':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 4]], 
        'Program_7_Params':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 4]], 
        'Program_8_Params':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM, 
            PyTango.READ, 4]],            
        'Temperature_1':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]],
        'Temperature_2':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]], 
        'Temperature_3':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]], 
        'Temperature_4':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]], 
        'Temperature_5':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]],             
        'Temperature_6':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]], 
        'Temperature_7':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]], 
        'Temperature_8':
            [[PyTango.DevDouble, 
            PyTango.SCALAR, 
            PyTango.READ]]           
        }


#------------------------------------------------------------------
#    BakeOutControlDSClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.PyDeviceClass.__init__(self, name)
        self.set_type(name);
        print "In BakeOutControlDSClass  constructor"

#==================================================================
#
#    BakeOutControlDS class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.PyUtil(sys.argv)
        py.add_TgClass(BakeOutControlDSClass,BakeOutControlDS,'BakeOutControlDS')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
